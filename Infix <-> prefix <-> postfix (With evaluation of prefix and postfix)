#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <math.h>
struct stack
{
    int size;
    int top;
    char* array;
};
int stackTop(struct stack* stack){
    return stack->array[stack->top];
}

void push(struct stack* sp, int item){
    if(sp->top == sp->size){
        printf("Stack is full");
    }else{
        sp->top++;
        sp->array[sp->top] = item;
    }
}
int pop(struct stack* sp){
    if(sp->top == -1){
        printf("Empty stack");
        return -1;
    }else{
        int item = sp->array[sp->top];
        sp->top--;
        return item;
    }
}

bool isEmpty(struct stack * sp){
    if(sp->top == -1){
        return true;
    }else{
        return false;
    }
}

int precidence(char ch){
    if (ch == '+' || ch == '-'){
        return 1;
    }else if (ch == '*' || ch == '/'){
        return 2;
    }else if (ch == '^'){
        return 3;
    }else{
        return 0;
    }
}
int isOperator(char c){
    if (c == '+' || c == '-' || c == '*' || c == '/' || c=='^'){
          return 1;
    }else{
        return 0;
    }
}

char *infixToPostfix(char *infix){
    struct stack *sp = (struct stack*) malloc(sizeof(struct stack));
    sp->size = 50;
    sp->top = -1;
    sp->array = (char *) malloc(sp->size * sizeof(char));
    char *postfix = (char*) malloc((strlen(infix)+1) * sizeof(char));
    int i = 0;
    int j = 0;
    
    while(infix[i] != '\0'){
        if(infix[i] == '(' || infix[i] == ')'){
            if(infix[i] == '('){
            push(sp,infix[i]);
            i++;
            }else{
                while(stackTop(sp) != '('){
                    postfix[j] = pop(sp);
                    j++;
                }pop(sp);
                i++;
            }
        }
        
        else if (!isOperator(infix[i])){
            postfix[j] = infix[i];
            j++;
            i++;
        }
        
        else{
            if(precidence(infix[i])>precidence(stackTop(sp))){
                push(sp, infix[i]);
                i++;
            }else{
                postfix[j] = pop(sp);
                j++;
            }
        }
    }
    
    while(!isEmpty(sp)){
        postfix[j] = pop(sp);
        j++;
    }
    
    postfix[j] = '\0';
    return postfix;
    
}

char *infixToPrefix(char *infix){
    struct stack *sp = (struct stack*)malloc(sizeof(struct stack));
    sp->top = -1;
    sp->size = 50;
    sp->array = (char *)malloc(sp->size * sizeof(char));
    char *prefix = (char *)malloc((strlen(infix)+1) * sizeof(char));
    char *reversedInfix = malloc((strlen(infix)+1) * sizeof(char));
    
    for(int k = 0;k<(strlen(infix));k++){
        reversedInfix[k] = infix[(strlen(infix))-k-1];
    }
    int i = 0;
    int j = 0;
    char *reversedPrefix = malloc((strlen(infix)+1) * sizeof(char));
    
    while(reversedInfix[i] != '\0'){
        if(reversedInfix[i] == ')' || reversedInfix[i] == '('){
            if(reversedInfix[i] == ')'){
                push(sp,reversedInfix[i]);
                i++;
            }else{
                while(stackTop(sp) != ')'){
                    reversedPrefix[j] = pop(sp);
                    j++;
                }pop(sp);
                i++;
            }
        }
        else if(!isOperator(reversedInfix[i])){
            reversedPrefix[j] = reversedInfix[i];
            i++;
            j++;
        }else{
            if(precidence(reversedInfix[i])>=precidence(stackTop(sp))){
                push(sp, reversedInfix[i]);
                i++;
            }else{
                reversedPrefix[j] = pop(sp);
                j++;
            }
        }
    }
    while(!isEmpty(sp)){
        reversedPrefix[j] = pop(sp);
        j++;
    }
    
    reversedPrefix[j] = '\0';
    
    for(int k = 0; k<strlen(reversedPrefix);k++){
        prefix[k] = reversedPrefix[strlen(reversedPrefix)-k-1];
    }
    
    return prefix;
}

int evaluationOfPrefix(char *prefix){
    struct stack *sp = (struct stack*) malloc(sizeof(struct stack));
    sp->top = -1;
    sp->size = 50;
    sp->array = (char *)malloc(sp->size * sizeof(char));
    int result;
    int i = strlen(prefix)-1;
    int A ,B;
    int join = 0;
    while(i != -1){
        
        if(prefix[i] == ']'){
            i--;
            int k = 0;
            while(prefix[i] != '['){
                if(k==0){
                join+=prefix[i]-'0';
                k++;
                }
                else if(k==1){
                    join+= (prefix[i]-'0')*10;
                    k++;
                }
                else if(k==2){
                    join+= (prefix[i]-'0')*100;
                    k++;
                }
            i--;
            }
            i--;
            push(sp,join);
        }
        else if(!isOperator(prefix[i])){
            push(sp,(prefix[i]-'0')); //converting char to int with the help of ASCII value
            i--;
        }
        else{
            A = pop(sp); 
            B = pop(sp);
            
            switch(prefix[i]){
                case '+':
                    result= (A+B);
                    push(sp,result);
                    i--;
                    break;
                case '-':
                    result= A-B;
                    push(sp,result);
                    i--;
                    break;
                case '*':
                    result= A*B;
                    push(sp,result);
                    i--;
                    break;
                case '/':
                    result= A/B;
                    push(sp,result);
                    i--;
                    break;
                case '^':
                    result= pow(A,B);
                    push(sp,result);
                    i--;
                    break;
            }
        }
    }
    return result;
}

int evaluationOfPostfix(char *postfix){
    struct stack *sp = (struct stack*) malloc(sizeof(struct stack));
    sp->top = -1;
    sp->size = 50;
    sp->array = (char *)malloc(sp->size * sizeof(char));
    int result;
    int i = 0;
    int A ,B;
    int join = 0;
    
    while(i != (strlen(postfix))){
        if(postfix[i] == '['){
            i++;
            //int k = 1;//have to use new logic
            int k=-1;
            int l = i;
            while(postfix[l]!=']'){
                l++;
                k++;
            }//finding the length of join
            
            while(postfix[i] != ']'){
                if(k==0){
                join+=postfix[i]-'0';
                k--;
                }
                else if(k==1){
                    join+= (postfix[i]-'0')*10;
                    k--;
                }
                else if(k==2){
                    join+= (postfix[i]-'0')*100;
                    k--;
                }
            i++;
            }
            i++;
            push(sp,join);
        }
        else if(!isOperator(postfix[i])){
            push(sp,(postfix[i]-'0')); //converting char to int with the help of ASCII value
            i++;
        }
        else{
            B = pop(sp); 
            A = pop(sp);
            
            switch(postfix[i]){
                case '+':
                    result= (A+B);
                    push(sp,result);
                    i++;
                    break;
                case '-':
                    result= A-B;
                    push(sp,result);
                    i++;
                    break;
                case '*':
                    result= A*B;
                    push(sp,result);
                    i++;
                    break;
                case '/':
                    result= A/B;
                    push(sp,result);
                    i++;
                    break;
                case '^':
                    result= pow(A,B);
                    push(sp,result);
                    i++;
                    break;
            }
        }
    }
    return result;
    
}

char *postfixToInfix(char *postfix){
    struct stack *sp = (struct stack*) malloc(sizeof(struct stack));
    sp->top = -1;
    sp->size = 50;
    sp->array = (char *)malloc(sp->size * sizeof(char));
    char *infix = (char *)malloc((strlen(postfix)+1) * sizeof(char));
    int i=0;
    
    while(i!=strlen(postfix)){
        if(!isOperator(postfix[i])){
            push(sp,postfix[i]);
            push(sp,' '); //this blank space  will be filled with operator
            i++;
        }else{
            for(int j = sp->top-1;j>-1;j--){
                if(sp->array[j] == ' '){
                    sp->array[j] = postfix[i];
                    break;
                }
            }
            i++;
        }
    }
    int k =0;
    int l=0;
    
    while(k != sp->top){
        infix[l] = sp->array[k];
        k++;
        l++;
    }
    
    return infix;
}

char *prefixToInfix(char *prefix){
    struct stack *sp = (struct stack*) malloc(sizeof(struct stack));
    sp->top = -1;
    sp->size = 50;
    sp->array = (char *)malloc(sp->size * sizeof(char));
    char *infix = (char *)malloc((strlen(prefix)+1) * sizeof(char));
    int i=strlen(prefix)-1;
    
    while(i!=-1){
        if(!isOperator(prefix[i])){
            push(sp,prefix[i]);
            push(sp,' ');
            i--;
        }else{
            for(int j = sp->top-1;j>-1;j--){
                if(sp->array[j] == ' '){
                    sp->array[j] = prefix[i];
                    break;
                }
            }
            i--;
        }
    }
    int k =sp->top;
    int l=0;
    
    while(k != -1){
        infix[l] = sp->array[k];
        k--;
        l++;
    }
    
    return infix;
    
}



int main()
{
    char *infix = "2+1*3"; //
    printf("Postfix: %s\n",infixToPostfix(infix));
    printf("prefix: %s\n",infixToPrefix(infix));
    printf("Evaluation of prefix: %d\n",evaluationOfPrefix(infixToPrefix(infix)));
    printf("Evaluation of postfix: %d\n",evaluationOfPostfix(infixToPostfix(infix)));
    printf("Postfix to infix: %s\n",postfixToInfix(infixToPostfix(infix)));
    printf("Prefix to infix: %s",prefixToInfix(infixToPrefix(infix)));

    return 0;
}

